medianSteps <- median(stepsByDay)
# mark the mean and median values on the histogram
abline(v=meanSteps, lwd = 3, col = 'green')
abline(v=medianSteps, lwd = 3, col = 'blue')
# create legend that displays the mean and median values
legend('topright', lty = 1, lwd = 3, col = c('green','blue'),legend =
c(paste('Mean: ', round(meanSteps)), paste('Median: ', medianSteps)))
```
## What is the average daily activity pattern?
First average the data by time interval:
```{r, echo=T}
stepsByInt <- tapply(data$steps, data$interval, mean, na.rm=T)
head(stepsByInt)
```
Now create a time series plot of average number of steps taken by time interval:
```{r, echo=T}
plot(unlist(labels(stepsByInt)),stepsByInt, type='l',main='Average Daily Activity Pattern',xlab='Time (5 Minute Intervals)', ylab='Average Number of Steps Across All Days')
```
Finally, calculate the 5-minute time interval which averages the most number of steps.
```{r, echo=T}
# calculates the max number of steps and the interval where it occurs
maxSteps <- max(stepsByInt)
maxSteps
maxInt <- labels(stepsByInt[(which(stepsByInt==maxSteps))])
maxInt
```
## Imputing missing values
First, calculate the number of missing values in the dataset.
```{r, echo=T}
numNA <- sum(is.na(data$steps))
numNA
```
Next, fill in missing values with the average for that time period.
```{r, echo=T}
# make a copy of data
fdata <- data
# function that replaces NA with the average steps for that interval
replaceNa = function(steps, int){
if (is.na(steps)){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
fdata <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
```
Now sum the number of steps per day for the filled in data:
```{r, echo=T}
fstepsByDay <- tapply(fdata$steps, data$date, sum, na.rm=T)
```
Now create a histogram that displays the mean and median steps per day:
```{r, echo=T}
hist(stepsByDay,breaks=length(fstepsByDay),main='Steps by Day (filled data)',xlab = 'Steps',col='grey')
# calculate the mean and median number of steps per day
fmeanSteps <- mean(fstepsByDay)
fmedianSteps <- median(fstepsByDay)
# mark the mean and median values on the histogram
abline(v=fmeanSteps, lwd = 3, col = 'green')
abline(v=fmedianSteps, lwd = 3, col = 'blue')
# create legend that displays the mean and median values
legend('topright', lty = 1, lwd = 3, col = c('green','blue'),legend =
c(paste('Mean: ', round(fmeanSteps)), paste('Median: ', fmedianSteps)))
```
Finally calculate the differences between the mean and median of the original and filled data
## Are there differences in activity patterns between weekdays and weekends?
data = read.csv('activity.csv', header = T)
head(data)
str(data)
stepsByDay <- tapply(data$steps, data$date, sum, na.rm=T)
hist(stepsByDay,breaks=length(stepsByDay),main='Steps by Day',xlab = 'Steps',col='grey')
# calculate the mean and median number of steps per day
meanSteps <- mean(stepsByDay)
medianSteps <- median(stepsByDay)
# mark the mean and median values on the histogram
abline(v=meanSteps, lwd = 3, col = 'green')
abline(v=medianSteps, lwd = 3, col = 'blue')
# create legend that displays the mean and median values
legend('topright', lty = 1, lwd = 3, col = c('green','blue'),legend =
c(paste('Mean: ', round(meanSteps)), paste('Median: ', medianSteps)))
stepsByInt <- tapply(data$steps, data$interval, mean, na.rm=T)
head(stepsByInt)
plot(unlist(labels(stepsByInt)),stepsByInt, type='l',main='Average Daily Activity Pattern',xlab='Time (5 Minute Intervals)', ylab='Average Number of Steps Across All Days')
maxSteps <- max(stepsByInt)
maxSteps
maxInt <- labels(stepsByInt[(which(stepsByInt==maxSteps))])
maxInt
numNA <- sum(is.na(data$steps))
numNA
fdata <- data
replaceNa = function(steps, int){
if (is.na(steps)){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
fdata <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
fstepsByDay <- tapply(fdata$steps, data$date, sum, na.rm=T)
fdata
head(fdata)
fdata <- data
head(fdata)
replaceNa = function(steps, int){
if (is.na(steps)){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
fdata <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
for i in (1:length(fdata)){
fdata[i,1]<-replaceNA(fdata[i,1],fdata[i,3])
}
replaceNa = function(steps, int){
if (is.na(steps)){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
for i in (1:length(fdata)){
fdata[i,1]<-replaceNA(fdata[i,1],fdata[i,3])
}
for i in fdata{
fdata[i,1]<-replaceNA(fdata[i,1],fdata[i,3])
}
replaceNa = function(steps, int){
if (is.na(steps)){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
newSteps <- replaceNa(fdata$steps,fdata$interval)
replaceNa = function(steps, int){
if (is.na(steps)){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
newSteps <- replaceNa(fdata$steps,fdata$interval)
fdata <- data
head(fdata)
# function that replaces NA with the average steps for that interval
replaceNa = function(steps, int){
if (is.na(steps)){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
$fdata$steps <- replaceNa(fdata$steps,fdata$interval)
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
fdata <- data
head(fdata)
# function that replaces NA with the average steps for that interval
replaceNa = function(steps, int){
if (is.na(steps[i])){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
fdata <- data
head(fdata)
# function that replaces NA with the average steps for that interval
replaceNa = function(steps, int){
lengthSteps <- length(steps)
for i in lengthSteps{
if (is.na(steps[i])){
replace <- stepsByInt[as.character(int[i])]
return (replace)
}
return (steps[i])
}
}
replaceNa = function(steps, int){
lengthSteps <- length(steps)
for (i in lengthSteps){
if (is.na(steps[i])){
replace <- stepsByInt[as.character(int[i])]
return (replace)
}
return (steps[i])
}
}
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
fdata <- data
head(fdata)
# function that replaces NA with the average steps for that interval
replaceNa = function(steps, int){
lengthSteps <- length(steps)
for (i in lengthSteps){
if (is.na(steps[i])){
replace <- stepsByInt[as.character(int[i])]
return (replace)
}
return (steps[i])
}
}
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
fdata <- data
head(fdata)
# function that replaces NA with the average steps for that interval
replaceNa = function(steps, int){
needsReplaced <- is.na(steps)
if (needsReplaced==1){
replace <- stepsByInt[as.character(int[i])]
return (replace)
}
return (steps[i])
}
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
fdata <- data
head(fdata)
# function that replaces NA with the average steps for that interval
replaceNa = function(steps, int){
needsReplaced <- is.na(steps)
if (needsReplaced==1){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
fstepsByDay <- tapply(fdata$steps, data$date, sum, na.rm=T)
hist(stepsByDay,breaks=length(fstepsByDay),main='Steps by Day (filled data)',xlab = 'Steps',col='grey')
# calculate the mean and median number of steps per day
fmeanSteps <- mean(fstepsByDay)
fmedianSteps <- median(fstepsByDay)
# mark the mean and median values on the histogram
abline(v=fmeanSteps, lwd = 3, col = 'green')
abline(v=fmedianSteps, lwd = 3, col = 'blue')
# create legend that displays the mean and median values
legend('topright', lty = 1, lwd = 3, col = c('green','blue'),legend =
c(paste('Mean: ', round(fmeanSteps)), paste('Median: ', fmedianSteps)))
hist(stepsByDay,breaks=length(fstepsByDay),main='Steps by Day (filled data)',xlab = 'Steps',col='grey')
# calculate the mean and median number of steps per day
fmeanSteps <- mean(fstepsByDay)
fmedianSteps <- median(fstepsByDay)
# mark the mean and median values on the histogram
abline(v=fmeanSteps, lwd = 3, col = 'green')
abline(v=fmedianSteps, lwd = 3, col = 'blue')
# create legend that displays the mean and median values
legend('topright', lty = 1, lwd = 3, col = c('green','blue'),legend =
c(paste('Mean: ', round(fmeanSteps)), paste('Median: ', fmedianSteps)))
c(paste('Mean: ', round(fmeanSteps)), paste('Median: ',round(fmedianSteps)))
hist(stepsByDay,breaks=length(fstepsByDay),main='Steps by Day (filled data)',xlab = 'Steps',col='grey')
# calculate the mean and median number of steps per day
fmeanSteps <- mean(fstepsByDay)
fmedianSteps <- median(fstepsByDay)
# mark the mean and median values on the histogram
abline(v=fmeanSteps, lwd = 3, col = 'green')
abline(v=fmedianSteps, lwd = 3, col = 'blue')
# create legend that displays the mean and median values
legend('topright', lty = 1, lwd = 3, col = c('green','blue'),legend =
c(paste('Mean: ', round(fmeanSteps)), paste('Median: ',round(fmedianSteps)))
```{r,echo=TRUE}
meanDif<-mean-fmean
meanDif<-meanSteps-fmeanSteps
meanDif
medianDif<-medianSteps-fmedianSteps
medianDif
meanDif <- fmeanSteps-meanSteps
meanDif
medianDif <- fmedianSteps-medianSteps
medianDif
?weekdays
weekdays(data$Date)
head(data)
weekdays(data$date)
class(data$date)
as.POSIXlt(data$date)
dates<-as.POSIXlt(data$date)
weekdays(dates)
data$date <- as.POSIXlt(data$date)
data$weekday <- if(weekdays(data$date)==('Sunday'|'Saturday')){return 'weekend'}else{return 'weekday'}
data$weekday <- if(weekdays(data$date)==('Sunday'|'Saturday')){return ('weekend')}else{return ('weekday')}
data$weekday <- if(weekdays(data$date)=='Sunday' | weekdays(data$date)=='Saturday'){return ('weekend')}else{return ('weekday')}
data$weekday
data$weekday <- if(weekdays(data$date)=='Sunday' | weekdays(data$date)=='Saturday'){'weekend'}else{'weekday'}
data$weekday <- if(weekdays(data$date)=='Sunday' | weekdays(data$date)=='Saturday'){'weekend'}else{'weekday'}
data$weekday
weekdays(dates)
data$weekday[9996]
dates <- weekday(data$date)
dates <- weekdays(data$date)
data$weekday <- if(dates=='Sunday' | dates   =='Saturday'){'weekend'}else{'weekday'}
data$weekday[9996]
dates[9996]
is.weekday = function(date){
weekday <- weekdays(date)
if (date==("Saturday" | "Sunday")){
return ("weekend")
}
return ("weekday"")
}
data$weekday<-is.weekday(data$date)
data$weekday
""
is.weekday = function(date){
weekday <- weekdays(date)
if (date==("Saturday" | "Sunday")){
return ("weekend")
}
return ("weekday")
}
data$weekday<-is.weekday(data$date)
is.weekday = function(date){
weekday <- weekdays(date)
if (weekday=="Saturday" | weekday=="Sunday")){
return ("weekend")
}
return ("weekday")
}
is.weekday = function(date){
weekday <- weekdays(date)
if (weekday=="Saturday" | weekday=="Sunday")){
return ("weekend")
}
return ("weekday")
}
is.weekday = function(date){
weekday <- weekdays(date)
if (weekday=="Saturday" | weekday=="Sunday"){
return ("weekend")
}
return ("weekday")
}
data$weekday<-is.weekday(data$date)
data$weekday
data$weekday[9996]
replaceNa = function(steps, int){
needsReplaced <- is.na(steps)
if (needsReplaced==1){
replace <- stepsByInt[as.character(int)]
return (replace)
}
return (steps)
}
fdata$steps <- replaceNa(fdata$steps,fdata$interval)
head(fdata)
data$weekday <- weekdays(data$date)
data$weekday <- weekdays(data$date)
if (data$weekday=="Sunday"){
data$weekday=="weekend"
}
dates<- data$weekday
if (dates=="Sunday"){
data$weekday=="weekend"
}
data$weekday[5]
data$weekday <- weekdays(data$date)
dates<- data$weekday
for (i in length(dates)){
if (dates[i]=="Sunday"){
data$weekday[i]=="weekend"
}
else if (dates[i]=="Saturday"){
data$weekday[i]=="weekend"
}
else{
data$weekday[i]=="weekday"
}
}
data$weekday
length(data$weekday)
data$weekday <- weekdays(data$date)
for (i in length(data$weekday)){
if (data$weekday[i]=="Sunday"){
data$weekday[i]=="weekend"
}
else if (data$weekday[i]=="Saturday"){
data$weekday[i]=="weekend"
}
else{
data$weekday[i]=="weekday"
}
}
data$weekday
head(data)
weekDay= function(x){
for (i in length(x)){
if (x[i]=="Sunday"){
x[i]=="weekend"
}
else if (x[i]=="Saturday"){
x[i]=="weekend"
}
else{
x[i]=="weekday"
}
}
return x
}
weekDay= function(x){
for (i in length(x)){
if (x[i]=="Sunday"){
x[i]=="weekend"
}
else if (x[i]=="Saturday"){
x[i]=="weekend"
}
else{
x[i]=="weekday"
}
}
return (x)
}
weekDay(data$weekday)
debug(weekDay)
weekDay= function(x){
for (i in length(x)){
x[i]
if (x[i]=="Sunday"){
x[i]=="weekend"
}
else if (x[i]=="Saturday"){
x[i]=="weekend"
}
else{
x[i]=="weekday"
}
x[i]
}
return (x)
}
weekDay(data$weekday)
weekDay("Monday")
length("Monday")
weekDay= function(x){
for (i in length(x)){
if (x[i]=="Sunday"){
y[i]=="weekend"
}
else if (x[i]=="Saturday"){
y[i]=="weekend"
}
else{
y[i]=="weekday"
}
y[i]
}
return (y)
}
Weekday("Monday")
weekDay("Monday")
weekDay= function(x){
y=numeric(length=length(x))
for (i in length(x)){
if (x[i]=="Sunday"){
y[i]=="weekend"
}
else if (x[i]=="Saturday"){
y[i]=="weekend"
}
else{
y[i]=="weekday"
}
y[i]
}
return (y)
}
weekDay("Monday")
debug(weekDay)
weekDay("Monday")
weekDay= function(x){
y=string(length=length(x))
for (i in length(x)){
if (x[i]=="Sunday"){
y[i]=="weekend"
}
else if (x[i]=="Saturday"){
y[i]=="weekend"
}
else{
y[i]=="weekday"
}
y[i]
}
return (y)
}
weekDay("Monday")
weekDay= function(x){
y=character(length=length(x))
for (i in length(x)){
if (x[i]=="Sunday"){
y[i]=="weekend"
}
else if (x[i]=="Saturday"){
y[i]=="weekend"
}
else{
y[i]=="weekday"
}
y[i]
}
return (y)
}
weekDay("Monday")
debug(weekDay)
weekDay("Monday")
